using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MasterFudge.Emulation.CPU
{
    delegate void OpcodeDelegate(Z80 cpu);

    public partial class Z80
    {
        static OpcodeDelegate[] opcodeTableMain = new OpcodeDelegate[]
        {
            /* 0x00 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x10 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x20 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x30 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { c.sp = c.memoryMapper.Read16(c.pc); c.pc += 2;  }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x40 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x50 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x60 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x70 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x80 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x90 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xA0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xB0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xC0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { c.pc = c.memoryMapper.Read16(c.pc); }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xD0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xE0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { opcodeTableED[c.memoryMapper.Read8(c.pc++)](c); }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xF0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { c.Push(c.af); }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { })
        };

        static OpcodeDelegate[] opcodeTableED = new OpcodeDelegate[]
        {
            /* 0x00 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x10 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x20 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x30 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x40 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { c.memoryMapper.Write16(c.memoryMapper.Read16(c.pc), c.bc.Word); c.pc += 2; }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x50 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { throw new Exception("meh"); }),
            /* 0x60 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x70 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { c.memoryMapper.Write16(c.memoryMapper.Read16(c.pc), c.sp); c.pc += 2; }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x80 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0x90 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xA0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xB0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xC0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xD0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xE0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            /* 0xF0 */
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { }),
            new OpcodeDelegate((c) => { })
        };
    }
}
